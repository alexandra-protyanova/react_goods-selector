{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","selectedGood","selectGood","good","includes","setState","prevState","filter","gooddie","switchCase","param","length","slice","join","this","className","map","type","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6PAGMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOIC,E,4MACJC,MAAQ,CACNC,aAAc,CAACH,EAAgB,K,EAGjCI,WAAa,SAACC,GACZ,IAAQF,EAAiB,EAAKD,MAAtBC,aAEJA,EAAaG,SAASD,GACxB,EAAKE,UAAS,SAAAC,GAAS,MAAK,CAC1BL,aAAcK,EAAUL,aACrBM,QAAO,SAAAC,GAAO,OAAIA,IAAYL,SAGnC,EAAKE,SAAS,CAAEJ,aAAa,GAAD,mBAAMA,GAAN,CAAoBE,O,EAIpDM,WAAa,SAACC,GACZ,OAAQA,EAAMC,QACZ,KAAK,EACH,MAAO,oBAET,KAAK,EACH,MAAM,GAAN,OAAUD,EAAM,GAAhB,gBAEF,QACE,MAAM,GAAN,OAAUA,EAAME,MAAM,GAAI,GAAGC,KAAK,MAAlC,gBAA+CH,EAAMA,EAAMC,OAAS,GAApE,mB,4CAIN,WAAU,IAAD,OACCV,EAAiBa,KAAKd,MAAtBC,aAER,OACE,sBAAKc,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,SACGD,KAAKL,WAAWR,KAEnB,oBAAIc,UAAU,YAAd,SACGjB,EAAgBkB,KAAI,SAAAb,GAAI,OAEvB,sBAAKY,UAAU,YAAf,UACE,6BACGZ,IAEH,wBACEc,KAAK,SACLF,UACEd,EAAaG,SAASD,GAClB,0CACA,6BAENe,QAAS,WACP,EAAKhB,WAAWC,IARpB,SAWGF,EAAaG,SAASD,GAAQ,SAAW,aAfdA,QAsBX,IAAxBF,EAAaU,QAEV,wBACEM,KAAK,SACLF,UAAU,wCACVG,QAAS,WACP,EAAKb,SAAS,CAAEJ,aAAc,MAJlC,0B,GAlEMkB,IAAMC,WAiFTrB,ICjGfsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2f1463e3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  selectedGood: string[];\n};\n\nclass App extends React.Component<{}, State> {\n  state = {\n    selectedGood: [goodsFromServer[8]],\n  };\n\n  selectGood = (good: string) => {\n    const { selectedGood } = this.state;\n\n    if (selectedGood.includes(good)) {\n      this.setState(prevState => ({\n        selectedGood: prevState.selectedGood\n          .filter(gooddie => gooddie !== good),\n      }));\n    } else {\n      this.setState({ selectedGood: [...selectedGood, good] });\n    }\n  };\n\n  switchCase = (param: string[] | []) => {\n    switch (param.length) {\n      case 0:\n        return 'No goods selected';\n\n      case 1:\n        return `${param[0]} is selected`;\n\n      default:\n        return `${param.slice(0, -1).join(', ')} and ${param[param.length - 1]} are selected`;\n    }\n  };\n\n  render() {\n    const { selectedGood } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">\n          {this.switchCase(selectedGood)}\n        </h1>\n        <ul className=\"App__list\">\n          {goodsFromServer.map(good => (\n\n            <div className=\"App__item\" key={good}>\n              <li>\n                {good}\n              </li>\n              <button\n                type=\"button\"\n                className={\n                  selectedGood.includes(good)\n                    ? 'button is-danger is-primary is-outlined'\n                    : 'button is-link is-outlined'\n                }\n                onClick={() => {\n                  this.selectGood(good);\n                }}\n              >\n                {selectedGood.includes(good) ? 'Remove' : 'Select'}\n              </button>\n            </div>\n\n          ))}\n        </ul>\n\n        {selectedGood.length !== 0\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-link is-outlined button-big\"\n              onClick={() => {\n                this.setState({ selectedGood: [] });\n              }}\n            >\n              Clear\n            </button>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}